name: MyNebo-CI-CD-Pipeline
env:
  AWS_REGION_NAME: "eu-central-1"
  IMAGE_NAME: ${{secrets.AWS_ECR}}.${{secrets.AWS_ECR_NAME}}

on:
  push:
    # Match all branches *without* a / in the name.
    # This will exclude "sub" branches, such as "feature branches",
    # named something like: "feature/my-feature". Those branches will
    # likely contain "work in progress" code, so we will run the tests
    # on the local machine and avoid using up GitHub Actions credits
    # (if applicable, such as in `private` repositories).
    # Filter syntax info: https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
    branches:
      - 'stage'
      - 'master'
  pull_request:
    # Since pull requests come from "third parties", we will automatically
    # test everything coming from the outside world, for good measure.
    # The `branches` tag could also be omitted, yielding the same effect here.
    branches:
      - 'master'



jobs:
  # Run code tests before building the image, to ensure it is good to go
  testing_step:
    name: Run code tests
    runs-on: ubuntu-latest


    steps:

    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
    - name: Setting up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 ruff
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Initalize and seed the database
      run: |
        flask db upgrade
        python seed.py
    - name: Lint the code with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with unittest
      run: |
        python -m unittest discover
        echo "Testing finished successfully"
  #Build and push the Docker image

  building_step:
    name: Building image
    runs-on: ubuntu-latest
    needs: testing_step


    steps:
    - name: Configure AWS connections
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{secrets.MY_PRIVATE_AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{secrets.MY_PRIVATE_AWS_SECRET_ACCESS_KEY}}
        aws-region: ${{env.AWS_REGION_NAME}}
    - uses: actions/checkout@v3

    - name: Connection to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{secrets.MY_PRIVATE_AWS_ACCESS_KEY_ID}}
        AWS_SECRET_ACCESS_KEY: ${{secrets.MY_PRIVATE_AWS_SECRET_ACCESS_KEY}}

    - name: Set outputs
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Build image and push to ECR registry with latest tag
      env:
        AWS_REGION: ${{env.AWS_REGION_NAME}}
        ECR_REPOSITORY: "nebo-repo"
        ECR_REGISTRY: ${{env.AWS_ECR_REGISTRY}}
        IMAGE_TAG: latest
      run: |
        export ECR_REGISTRY=${{steps.login-ecr.outputs.registry}}
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Build image and push to ECR registry with sha_short
      env:
        AWS_REGION: ${{env.AWS_REGION_NAME}}
        ECR_REPOSITORY: "nebo-repo"
        ECR_REGISTRY: ${{env.AWS_ECR_REGISTRY}}


      run: |
          export ECR_REGISTRY=${{steps.login-ecr.outputs.registry}}
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.vars.outputs.sha_short }} .
          echo "Pushing image to ECR..."
          echo " sha_short is ${{ steps.vars.outputs.sha_short }}"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.vars.outputs.sha_short }}
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.vars.outputs.sha_short }}"

  deploing_stage:
    name: Deploying to stage
    runs-on: ubuntu-latest
    needs: building_step
    if: github.ref == 'refs/heads/stage'

    steps:
    - name: Print value from previus job
      run: echo " STAGE- sha_short is ${{ steps.vars.outputs.sha_short }}"

    - uses: actions/checkout@v3

    - name: Configure AWS connections
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{secrets.MY_PRIVATE_AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{secrets.MY_PRIVATE_AWS_SECRET_ACCESS_KEY}}
        aws-region: ${{env.AWS_REGION_NAME}}

    - name: Connection to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{secrets.MY_PRIVATE_AWS_ACCESS_KEY_ID}}
        AWS_SECRET_ACCESS_KEY: ${{secrets.MY_PRIVATE_AWS_SECRET_ACCESS_KEY}}

    - name: Deployng into ASG-STAGE
      env:
        AWS_ACCESS_KEY_ID: ${{secrets.MY_PRIVATE_AWS_ACCESS_KEY_ID}}
        AWS_SECRET_ACCESS_KEY: ${{secrets.MY_PRIVATE_AWS_SECRET_ACCESS_KEY}}
        ASG: ${{secrets.ASG_STAGE}}
        AWS_REGION: ${{env.AWS_REGION_NAME}}
        ECR_REGISTRY: ${{secrets.AWS_ECR}}
        ECR_REPOSITORY: ${{secrets.AWS_ECR_NAME}}


      run: |
        echo "Start deploying to ASG-STAGE"
        chmod +x deploy.sh
        ./deploy.sh
        echo "Deploying to ASG-STAGE was successful !!! "


#####################  DEPLOY TO PROD  ###################################

  deploing_prod:
    name: Deploying to prod
    runs-on: ubuntu-latest
    needs: building_step
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v3
    - name: Configure AWS connections
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{secrets.MY_PRIVATE_AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{secrets.MY_PRIVATE_AWS_SECRET_ACCESS_KEY}}
        aws-region: ${{env.AWS_REGION_NAME}}
    - name: Deployng into ASG-STAGE
      env:
        AWS_ACCESS_KEY_ID: ${{secrets.MY_PRIVATE_AWS_ACCESS_KEY_ID}}
        AWS_SECRET_ACCESS_KEY: ${{secrets.MY_PRIVATE_AWS_SECRET_ACCESS_KEY}}
        ASG: ${{secrets.ASG_PROD}}
        AWS_REGION: ${{env.AWS_REGION_NAME}}
        ECR_REGISTRY: ${{secrets.AWS_ECR}}
        ECR_REPOSITORY: ${{secrets.AWS_ECR_NAME}}
      run: |
        echo "Start deploying to ASG-PROD"
        chmod +x deploy.sh
        ./deploy.sh
        echo "Deploying to ASG-PROD was successful !!! "

#####################   NOTIFICATION    ###################################

  notification_stage:
    name: Slack notification for Delivery team
    runs-on: ubuntu-latest
    needs: healthchec
    steps:
      - uses: actions/checkout@v3
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: 'Deploy to STAGE was successful !!! :rocket:'

  notification_prod:
    name: Email notification for DevOps team
    runs-on: ubuntu-latest
    needs: healthchec_prod
    steps:
      - uses: cinotify/github-action@main
        with:
          to: 'sdgadmin@gmail.com'
          subject: 'building main'
          body: 'Deploy to PROD env was successful !!!'


#####################   HEALTHCHECK    ####################################

  healthchec:
      name: Healthcheck
      runs-on: ubuntu-latest
      needs: deploing_stage
      steps:
        - name: Check the deployed service URL
          uses: jtalk/url-health-check-action@v3
          with:
            # Check the following URLs one by one sequentially
            #url: http://example.com|http://example.com
            url: ${{secrets.HEALTHCHECK_URL_STAGE}}
            # Follow redirects, or just report success on 3xx status codes
            follow-redirect: false # Optional, defaults to "false"
            # Fail this action after this many failed attempts
            max-attempts: 3 # Optional, defaults to 1
            # Delay between retries
            retry-delay: 5s # Optional, only applicable to max-attempts > 1
            # Retry all errors, including 404. This option might trigger curl upgrade.
            retry-all: false # Optional, defaults to "false"


  healthchec_prod:
      name: Healthcheck PROD
      runs-on: ubuntu-latest
      needs: deploing_prod
      steps:
        - name: Check the deployed service URL
          uses: jtalk/url-health-check-action@v3
          with:
            # Check the following URLs one by one sequentially
            #url: http://example.com|http://example.com
            url: ${{secrets.HEALTHCHECK_URL_PROD}}
            # Follow redirects, or just report success on 3xx status codes
            follow-redirect: false # Optional, defaults to "false"
            # Fail this action after this many failed attempts
            max-attempts: 3 # Optional, defaults to 1
            # Delay between retries
            retry-delay: 5s # Optional, only applicable to max-attempts > 1
            # Retry all errors, including 404. This option might trigger curl upgrade.
            retry-all: false # Optional, defaults to "false"